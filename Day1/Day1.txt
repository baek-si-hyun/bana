Git
버전관리 시스템의 종류

✔ 버전 관리
여러 파일을 하나의 버전으로 묶어 관리하는 것

버전 관리 시스템의 종류
1. 클라이언트 - 서버 모델
    - 하나의 중앙 서버로 여러 클라이언트들이 각자 필요한 것만 가져와서 작업을 하고 다시 중앙 서버로 보내서 통합하는 방식
    - CVS, SVN

2.  분산 모델 
    - 하나의 중앙 서버가 존재하지만 여러 클라이언트들은 각자의 컴퓨터 저장소에 전체 사본을 가지고 작업하는 방식
    - Git

Git의 장점
1. 동시에 작업하는 사람들과 소스코드를 주고 받을 필요가 없음
2. 같은 파일을 여러명이 동시에 병렬 개발이 가능
3. 변동 과정을 체계적으로 관리할 수 있고 , 언제든지 지난 시점의 버전으로 되돌릴 수 있다.
4. 인터넷이 연결되지 않을 곳에서도 개발을 진행할 수 있고, 중앙 서버의 데이터가 유실되어도 다시 복구 할 수 있다.


git 설치
https://git-scm.com/
- 왼쪽 메뉴에서 다운로드를 클릭
- 64-bit Git for Windows Setup. 클릭
- 기본 설정으로 설치


터미널 명령어
- 컨트롤 + L : 화면 클리어
- pwd : 현재 디렉토리 경로
- cd : 다른 디렉토리로 이동
    cd .. : 상위 디렉토리로 이동
    cd 디렉토리 : 특정 디렉토리로 이동


git 명령어
1. 프로젝트 디렉토리 내에 로컬 저장소를 생성
    git init

.git 숨김폴더가 생성
    ls -al : 숨김폴더를 보이게 할수있음

2. git 버전 관리할 파일을 선택(stage에 올림)
    git add index.html

3. 하나의 버전으로 만들기
    git commit -m "파일명 커밋"

아래의 명령어 입력하여 해결
Author identity unknown

*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'qortl@LAPTOP-K2ESLOR4.(none)')

아래 명령어를 입력하여 해결
git config --global user.email "qortlgus100@gmail.com"
git config --global user.name "백시현"

이메일을 잘못 인력한 경우
 git config --global user.email "변경할 이메일"

 확인
 git config user.email

4. 로그 확인하기
    git log

README.md
마크다운문법으로 작성된 파일. 깃허브에 업로드시 프로젝트 메인 설명글로 사용

    1. 제목
    # 제목 <h1></h1>
    ## 제목 <h2></h2>
    ..
    ###### 제목 <h6></h6>

    2. 강조
    *이탤릭체* 또는 _이탤릭체_
    *볼드체*
    **_이탤릭체와 볼드체를 동시에_**
    ~~취소선~~
    <ul>밑줄</ul>

    3. 목록
    순서가 필요할 떄
    1. 순서가 필요한 목록
        - 순서가 필요하지 않은 목록

    4. 링크
    [google](https://google.com)

    5. 코드 작성
    ```
        프로그램 코드 작성
    ```

5. 여러 파일을 함께 선택(stage 에 현재 디렉토리에 있는 변화된 모든 파일을 선택)

    git add .

6. 선택된 여러 파일을 커밋

    git commit -m "현재 디렉토리에 있는 모든 파일을 커밋"

깃허브(git hub)

- git으로 버전 관리한 코드를 업로드 할 수 있는 클라우드 서비스
- 단순히 저장만 하는 것이 아니라 유저들과 함께 코드를 공유하고 온라인으로 하나의 프로젝트를 개발할 수 있게 해줌

7. github에 저장소 만들기
    Create repository 버튼을 클릭하여 생성

8. 로컬 저장소에 github 저장소 주소를 설정
    git remote add origin https://github.com/baek-si-hyun/website.git

9. 만든 커밋(버전)을 github에 전송(푸시)
    git push -u origin master

✔ remote 재등록

    원격 연결 확인
    git remote -v

    원격 연결 삭제
    git remote remove https://github.com/baek-si-hyun/website.git

    원격 연결 재등록
    git remote add origin https://github.com/baek-si-hyun/website.git


10. 원격저장소에 저장된 내용 복사

    git clone https://github.com/parks-od/website1 (새로 디렉토리를 만들고 복사)
    git clone https://github.com/parks-od/website1 . (디렉토리 안만들고 복사)

11. github pages
- setting-> 왼쪽 메뉴 pages를 선택
- source를 master 선택
- save 버튼을 클릭후 https://baek-si-hyun.github.io/website/ 를 클릭